const AgentRunner = require("./agents/agentRunner");
const logger = require("./logger");

async function main() {
  logger.info("Cherry website builder starting...");
  
  const cherry = new AgentRunner({ agentName: "cherry" });
  
  const initialized = await cherry.init();
  if (!initialized) {
    logger.error("Failed to initialize Cherry agent runner");
    process.exit(1);
  }
  
  const buildResult = await cherry.startWebsiteBuild();
  
  if (buildResult.success) {
    logger.info("Website build process initiated successfully");
    logger.info("Check the task queue progress for updates");
  } else {
    logger.error(`Website build failed to start: ${buildResult.error}`);
  }
}

main().catch((err) => {
  logger.error(`Unhandled error in Cherry main process: ${err.message}`);
  process.exit(1);
});

// Add this to your AgentRunner class in src/agents/agentRunner.js

async startWebsiteBuild() {
  logger.info("Cherry is starting website build process...");
  
  try {
    // Step 1: Have developer plan the architecture
    const architecture = await this.runPythonAgent(
      "developer", 
      "design_website_structure"
    );
    logger.info("Website architecture designed");
    
    // Step 2: Generate components and pages from the architecture
    const generationPlan = await this.runPythonAgent(
      "code_generator",
      "generate_from_architecture"
    );
    
    if (generationPlan.success && generationPlan.tasks) {
      // Step 3: Queue all the generation tasks
      logger.info(`Queueing ${generationPlan.tasks.length} tasks for website build`);
      generationPlan.tasks.forEach(task => this.queueTask(task));
      
      // Step 4: After components are generated, optimize them
      this.queueTask({
        type: "optimize-components",
        data: {
          components: architecture.components.map(c => c.name)
        }
      });
      
      // Step 5: Run tests once everything is generated
      this.queueTask({
        type: "run-test",
        data: {}
      });
      
      // Step 6: Commit the initial website
      this.queueTask({
        type: "git-commit",
        data: {
          message: "Initial website structure generated by Cherry"
        }
      });
      
      return { success: true, message: "Website build started" };
    } else {
      throw new Error("Failed to generate component tasks");
    }
  } catch (err) {
    logger.error(`Failed to start website build: ${err.message}`);
    return { success: false, error: err.message };
  }
}

async optimizeComponents(componentNames) {
  for (const name of componentNames) {
    const componentPath = path.join(process.cwd(), "src/components", `${name}.jsx`);
    try {
      await this.runPythonAgent("code_agent", "optimize_component", { component_path: componentPath });
      logger.info(`Optimized component: ${name}`);
    } catch (err) {
      logger.error(`Failed to optimize ${name}: ${err.message}`);
    }
  }
  return true;
}
