





























}  return context  }    throw new Error('useAgent must be used within an AgentProvider')  if (!context) {  const context = useContext(AgentContext)export const useAgent = () => {}  )    </AgentContext.Provider>      {children}    <AgentContext.Provider value={{ agents, addAgent }}>  return (  }    setAgents(prev => [...prev, agent])  const addAgent = (agent: string) => {  const [agents, setAgents] = useState<string[]>([])export const AgentProvider = ({ children }: { children: ReactNode }) => {const AgentContext = createContext<AgentContextProps | undefined>(undefined)}  addAgent: (agent: string) => void  agents: string[]interface AgentContextProps {import React, { createContext, useContext, ReactNode, useState } from 'react'