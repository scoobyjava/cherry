from abc import ABC, abstractmethod from typing import Dict, List, Any, Optional
# PineconeMemory implementation
nano /workspaces/cherry/cherry/memory/providers/pinecone_memory.pyclass MemoryInterface(ABC): 
    @abstractmethod def store(self, key: str, data: Dict[str, Any], namespace: Optional[str] = 
    None) -> str:
        """Store data in memory with optional namespace""" pass
# Factory implementation
nano /workspaces/cherry/cherry/memory/factory.py @abstractmethod def retrieve(self, query: str, 
    namespace: Optional[str] = None, limit: int = 5) -> List[Dict[str, Any]]:
        """Retrieve relevant memory entries based on semantic search""" pass
# Memory Manager
nano /workspaces/cherry/cherry/memory/manager.py# Base memory interface
nano /workspaces/cherry/cherry/memory/base.py

# PineconeMemory implementation
nano /workspaces/cherry/cherry/memory/providers/pinecone_memory.py

# Factory implementation  
nano /workspaces/cherry/cherry/memory/factory.py

# Memory Manager
nano /workspaces/cherry/cherry/memory/manager.py# Base memory interface
nano /workspaces/cherry/cherry/memory/base.py

# PineconeMemory implementation
nano /workspaces/cherry/cherry/memory/providers/pinecone_memory.py

# Factory implementation  
nano /workspaces/cherry/cherry/memory/factory.py

# Memory Manager
nano /workspaces/cherry/cherry/memory/manager.py# Base memory interface
nano /workspaces/cherry/cherry/memory/base.py

# PineconeMemory implementation
nano /workspaces/cherry/cherry/memory/providers/pinecone_memory.py

# Factory implementation  
nano /workspaces/cherry/cherry/memory/factory.py

# Memory Manager
nano /workspaces/cherry/cherry/memory/manager.py# Base memory interface
nano /workspaces/cherry/cherry/memory/base.py

# PineconeMemory implementation
nano /workspaces/cherry/cherry/memory/providers/pinecone_memory.py

# Factory implementation  
nano /workspaces/cherry/cherry/memory/factory.py

# Memory Manager
nano /workspaces/cherry/cherry/memory/manager.pynano /workspaces/cherry/cherry/utils/embeddings.pypip install pinecone-client chromadbpip install pinecone-client chromadbpip install pinecone-client chromadbpip install pinecone-client chromadbpip install pinecone-client chromadbpip install pinecone-client chromadbpip install pinecone-client chromadbimport sys
from cherry.core.orchestrator import Orchestrator

def main():
    orchestrator = Orchestrator()
    print("Cherry CLI. Type 'exit' to quit.")
    
    while True:
        task = input("Enter task: ")
        if task.lower() == "exit":
            break
        response = orchestrator.process_task(task)
        print(f"Response:\n{response}\n")

if __name__ == "__main__":
    main()import sys
from cherry.core.orchestrator import Orchestrator

def main():
    orchestrator = Orchestrator()
    print("Cherry CLI. Type 'exit' to quit.")
    
    while True:
        task = input("Enter task: ")
        if task.lower() == "exit":
            break
        response = orchestrator.process_task(task)
        print(f"Response:\n{response}\n")

if __name__ == "__main__":
    main()cd /workspaces/cherry
python -m cherry.cli# Go to your project directory
cd /workspaces/cherry

# Stage all changes
git add .

# Commit the changes with a message
git commit -m "Update orchestrator implementation with improved error handling"

# Push to the remote repository (assuming you want to push to the main branch)
git push origin main    @abstractmethod
    def update(self, key: str, data: Dict[str, Any], namespace: Optional[str] = None) -> bool:
        """Update existing memory entry"""
        pass
        
    @abstractmethod
    def delete(self, key: str, namespace: Optional[str] = None) -> bool:
        """Remove a memory entry"""
        pass
