
return list(self.plugins.keys()) def list_plugins(self): return self.plugins.get(plugin_name) def get_plugin(self, plugin_name): raise ImportError(f"Error loading plugin {plugin_name} from {plugin_path}: {str(e)}") except Exception as e: return module            self.plugins[plugin_name] = module            spec.loader.exec_module(module)            module = importlib.util.module_from_spec(spec) raise ImportError(f"Could not load spec for module {plugin_name}.") if spec is None:            spec = importlib.util.spec_from_file_location(plugin_name, plugin_path) try: raise FileNotFoundError(f"Plugin file {plugin_path} does not exist.") if not os.path.exists(plugin_path): def load_plugin(self, plugin_name, plugin_path):        self.plugins = {} def __init__(self): class PluginLoader: import osimport importlib.util
